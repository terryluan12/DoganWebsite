openapi: 3.0.3
info:
  title: Dogan API
  version: 0.0.1
  description: API for Dogan
paths:
  /game/{game_name}:
    get:
      operationId: game_retrieve
      parameters:
      - in: path
        name: game_name
        schema:
          type: string
        required: true
      tags:
      - game
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
          description: ''
    post:
      operationId: game_create
      parameters:
      - in: path
        name: game_name
        schema:
          type: string
        required: true
      tags:
      - game
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Game'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Game'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Game'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
          description: ''
    delete:
      operationId: game_destroy
      parameters:
      - in: path
        name: game_name
        schema:
          type: string
        required: true
      tags:
      - game
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /game/{game_name}/player:
    post:
      operationId: game_player_create
      parameters:
      - in: path
        name: game_name
        schema:
          type: string
        required: true
      tags:
      - game
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Game'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Game'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Game'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
          description: ''
  /game/{game_name}/player/{player_name}:
    delete:
      operationId: game_player_destroy
      parameters:
      - in: path
        name: game_name
        schema:
          type: string
        required: true
      - in: path
        name: player_name
        schema:
          type: string
        required: true
      tags:
      - game
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /games:
    get:
      operationId: games_list
      tags:
      - games
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Game'
          description: ''
  /user:
    post:
      operationId: user_create
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /user/{username}:
    get:
      operationId: user_retrieve
      parameters:
      - in: path
        name: username
        schema:
          type: string
        required: true
      tags:
      - user
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: user_update
      parameters:
      - in: path
        name: username
        schema:
          type: string
        required: true
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: user_partial_update
      parameters:
      - in: path
        name: username
        schema:
          type: string
        required: true
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: user_destroy
      parameters:
      - in: path
        name: username
        schema:
          type: string
        required: true
      tags:
      - user
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /user/me:
    get:
      operationId: user_me_retrieve
      tags:
      - user
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /user/session:
    post:
      operationId: user_session_create
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: user_session_destroy
      tags:
      - user
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /users:
    get:
      operationId: users_list
      tags:
      - users
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
components:
  schemas:
    Game:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
        game_name:
          type: string
          readOnly: true
        admin:
          $ref: '#/components/schemas/User'
      required:
      - admin
      - game_name
    PatchedUser:
      type: object
      properties:
        username:
          type: string
          maxLength: 100
        email:
          type: string
          format: email
          nullable: true
          title: Email address
          maxLength: 254
        password:
          type: string
          nullable: true
          maxLength: 100
        user_id:
          type: integer
          readOnly: true
        game:
          type: integer
          readOnly: true
          nullable: true
        wins:
          type: integer
          readOnly: true
        losses:
          type: integer
          readOnly: true
        time_created:
          type: string
          format: date-time
          readOnly: true
    User:
      type: object
      properties:
        username:
          type: string
          maxLength: 100
        email:
          type: string
          format: email
          nullable: true
          title: Email address
          maxLength: 254
        password:
          type: string
          nullable: true
          maxLength: 100
        user_id:
          type: integer
          readOnly: true
        game:
          type: integer
          readOnly: true
          nullable: true
        wins:
          type: integer
          readOnly: true
        losses:
          type: integer
          readOnly: true
        time_created:
          type: string
          format: date-time
          readOnly: true
      required:
      - game
      - losses
      - time_created
      - user_id
      - wins
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
