from django.test import TestCase
from rest_framework.test import APIClient
from accounts.models import User

import pytest

### Fixtures

@pytest.fixture
def superClient():
    client = APIClient()
    user = User.objects.create_superuser(username="admin", email="admin@test.com", password="adminPassword")
    user.save()
    response = client.post("/user/session", {"username": "admin", "password": "adminPassword"})
    assert response.status_code == 200
    return client

@pytest.fixture
def createUsersFixture(client):
    client.post("/user", {"username": "testUser1", "email": "test1@test.com", "password": "test1Password"})
    client.post("/user", {"username": "testUser", "email": "test@test.com", "password": "testPassword"})

@pytest.fixture
def loggedInClient(createUsersFixture):
    client = APIClient()
    response = client.post("/user/session", {"username": "testUser", "password": "testPassword"})
    assert response.status_code == 200
    return client

@pytest.fixture
def loggedInClient1(createUsersFixture):
    client = APIClient()
    response = client.post("/user/session", {"username": "testUser1", "password": "test1Password"})
    assert response.status_code == 200
    return client

@pytest.fixture
def clientWithAdminGame(loggedInClient):
    response = loggedInClient.post("/game/testGame")
    assert response.status_code == 201
    return loggedInClient


### Test Cases for GameDetailView

@pytest.mark.django_db
def test_CreateGame(loggedInClient):
    response = loggedInClient.get("/user/me")
    assert response.status_code == 200
    response = loggedInClient.post("/game/testGame")
    assert response.status_code == 201
    assert response.data["game_name"] == "testGame"
    assert len(response.data["users"]) == 1
    assert response.data["users"][0]["username"] == "testUser"
    assert response.data["admin"]["username"] == "testUser"

@pytest.mark.django_db
def test_CreateGameNotLoggedIn(client):
    response = client.get("/user/me")
    assert response.status_code == 404
    response = client.post("/game/testGame")
    assert response.status_code == 201
    response = client.get("/user/me")
    assert response.status_code == 200

@pytest.mark.django_db
def test_CreateSameGameTwice(client, clientWithAdminGame):
    response = client.post("/game/testGame")
    assert response.status_code == 400
    assert response.data[0] == "Game already exists."

@pytest.mark.django_db
def test_DeleteGameNotAdmin(clientWithAdminGame, loggedInClient1):
    response = loggedInClient1.delete("/game/testGame")
    assert response.status_code == 403
    
@pytest.mark.django_db
def test_DeleteGameAsAdmin(clientWithAdminGame):
    # Delete Game
    response = clientWithAdminGame.delete("/game/testGame")
    assert response.status_code == 204
    
    # Confirm the client is still logged in
    response = clientWithAdminGame.get("/user/me")
    assert response.status_code == 200
    assert response.data["username"] == "testUser"
    assert response.data["game"] == None

### Test Cases for GamePlayerView

@pytest.mark.django_db
def test_AddPlayer(clientWithAdminGame, loggedInClient1):
    response = loggedInClient1.post("/game/testGame/player")
    assert response.status_code == 201
    assert "testUser" in [user["username"] for user in response.data["users"]]
    assert response.data["admin"]["username"] == "testUser"

@pytest.mark.django_db
def test_AddPlayerAlreadyInGame(clientWithAdminGame):
    response = clientWithAdminGame.get("/user/me")
    response = clientWithAdminGame.post("/game/testGame/player")
    assert response.status_code == 400
    assert response.data[0] == "User already in a game."

@pytest.mark.django_db
def test_AddPlayerNotLoggedIn(client, superClient, clientWithAdminGame):
    response = client.get("/user/me")
    response = client.post("/game/testGame/player")
    assert response.status_code == 201
    response = superClient.get("/users")
    assert len(response.data) == 4 # testUser, testUser1, admin, autogenerated user

@pytest.mark.django_db
def test_RemovePlayer(clientWithAdminGame, loggedInClient1):
    response = loggedInClient1.post("/game/testGame/player")

    # Remove player from game
    response = loggedInClient1.delete("/game/testGame/player")
    assert response.status_code == 200
    assert len(response.data["users"]) == 1
    assert "testUser" in [user["username"] for user in response.data["users"]]
    assert response.data["admin"]["username"] == "testUser"

@pytest.mark.django_db
def test_RemovePlayerNotInGame(clientWithAdminGame, loggedInClient1):
    # Remove player from game
    response = loggedInClient1.delete("/game/testGame/player")
    assert response.status_code == 400
    assert response.data[0] == "User not in game."
    
    response = clientWithAdminGame.get("/game/testGame")
    assert len(response.data["users"]) == 1
    assert "testUser" in [user["username"] for user in response.data["users"]]
    assert response.data["admin"]["username"] == "testUser"

@pytest.mark.django_db
def test_AdminLeaves(clientWithAdminGame, loggedInClient1):
    response = loggedInClient1.post("/game/testGame/player")
    response = clientWithAdminGame.delete("/game/testGame/player")
    assert response.status_code == 200
    assert len(response.data["users"]) == 1
    assert "testUser1" in [user["username"] for user in response.data["users"]]
    assert response.data["admin"]["username"] == "testUser1"

@pytest.mark.django_db
def test_RemoveLastPlayerAndDeleteGame(clientWithAdminGame):
    response = clientWithAdminGame.delete("/game/testGame/player")
    assert response.status_code == 204
    assert response.data["message"] == "Game deleted."
    
    response = clientWithAdminGame.get("/game/testGame")
    assert response.status_code == 404

### Test Cases for RemovePlayerView

@pytest.mark.django_db
def test_DeletePlayerWithoutPermission(clientWithAdminGame, loggedInClient1):
    response = loggedInClient1.post("/game/testGame/player")
    assert response.status_code == 201
    assert "testUser1" in [user["username"] for user in response.data["users"]]
    
    response = loggedInClient1.delete("/game/testGame/player/testUser")
    assert response.status_code == 403
    

@pytest.mark.django_db
def test_DeleteOtherPlayerAsGameAdmin(clientWithAdminGame, loggedInClient1):
    response = loggedInClient1.post("/game/testGame/player")
    assert response.status_code == 201
    assert "testUser1" in [user["username"] for user in response.data["users"]]
    
    response = clientWithAdminGame.delete("/game/testGame/player/testUser1")
    assert response.status_code == 200
    assert response.data["game_name"] == "testGame"
    assert "testUser1" not in [user["username"] for user in response.data["users"]]
    
@pytest.mark.django_db
def test_DeleteSelfAsGameAdmin(superClient, clientWithAdminGame, loggedInClient1):
    response = loggedInClient1.post("/game/testGame/player")
    assert response.status_code == 201
    assert "testUser1" in [user["username"] for user in response.data["users"]]
    
    response = clientWithAdminGame.delete("/game/testGame/player/testUser")
    assert response.status_code == 200
    assert response.data["game_name"] == "testGame"
    assert "testUser" not in [user["username"] for user in response.data["users"]]
    assert "testUser1" in [user["username"] for user in response.data["users"]]
    assert response.data["admin"]["username"] == "testUser1"

@pytest.mark.django_db
def test_DeleteSelfAsOnlyGamePlayer(superClient, clientWithAdminGame):
    response = clientWithAdminGame.delete("/game/testGame/player/testUser")
    assert response.status_code == 204
    response = superClient.get("/games")
    assert response.status_code == 200
    assert len(response.data) == 0

@pytest.mark.django_db
def test_DeletePlayerAsStaff(superClient, loggedInClient1, clientWithAdminGame):
    response = loggedInClient1.post("/game/testGame/player")
    assert response.status_code == 201
    assert "testUser1" in [user["username"] for user in response.data["users"]]
    
    response = superClient.delete("/game/testGame/player/testUser")
    assert response.status_code == 200
    assert response.data["game_name"] == "testGame"
    assert "testUser" not in [user["username"] for user in response.data["users"]]
    assert "testUser1" in [user["username"] for user in response.data["users"]]
    assert response.data["admin"]["username"] == "testUser1"
    
@pytest.mark.django_db
def test_DeleteOnlyPlayerAsStaff(superClient, clientWithAdminGame):
    response = superClient.delete("/game/testGame/player/testUser")
    assert response.status_code == 204
    response = superClient.get("/games")
    assert response.status_code == 200
    assert len(response.data) == 0

### Test Cases for GameListView

@pytest.mark.django_db
def test_ListGames(superClient, clientWithAdminGame):
    response = superClient.get("/games")
    assert response.status_code == 200
    assert len(response.data) == 1
    assert response.data[0]["game_name"] == "testGame"
    assert "testUser" in [user["username"] for user in response.data[0]["users"]]

@pytest.mark.django_db
def test_ListGamesUnauthorized(clientWithAdminGame):
    response = clientWithAdminGame.get("/games")
    assert response.status_code == 403